{"instances":{"application":{"persistent":false},"Navbar/0-0-0-1":{"tabs":[{"title":"Blog","href":"/blog"},{"title":"About me","href":"/me"}],"showDropdown":false,"persistent":false},"/blog/creating-this-blog":{"persistent":false,"html":"<h1 class=\"text-4xl font-bold text-rosePine-iris\">A big dsclaimer first<\\/h1><p class=\"my-8 text\"><img src=\"/assets/img/nulla-tools.webp\" alt=\"image\"><\\/p><p class=\"my-8 text\">Exploring the vast array of JavaScript frameworks such as React, Vue, Angular, and Svelte, I encountered limitations, vendor lock-in issues, and the overwhelming chaos of the JavaScript ecosystem, with its countless dependencies and conflicting solutions. However, amidst this tumult, my discovery of Nullstack brought a ray of hope. Initially seen as unconventional due to its use of ES6 classes and named methods for component cycles, I soon recognized the brilliance and potential of this framework.<\\/p><p class=\"my-8 text\">Nullstack stands out for its refreshing simplicity, offering streamlined data management through class props rather than convoluted states. One remarkable feature is its superior application context, which eliminates the need for a Redux store. Notably, Nullstack goes beyond the capabilities of Next.js by providing built-in support for progressive web app (PWA) capabilities without the need for additional dependencies, resulting in improved SEO capabilities.<\\/p><p class=\"my-8 text\">But the greatness of Nullstack extends further. It offers the flexibility to adapt to various application architectures, be it single-page applications (SPAs), static HTML, or Node servers with Express. What truly sets it apart is its lack of vendor lock-in, allowing projects to run seamlessly across diverse infrastructures, from on-premises to cloud-based environments. In a world rife with complexity and uncertainty, Nullstack emerges as a great solution, offering clarity and stability for web developers seeking an alternative path.<\\/p><h1 class=\"text-4xl font-bold text-rosePine-iris\">Getting start<\\/h1><p class=\"my-8 text\">Nullstack is very consistent, because of this structure, everything in nullstack is based on things is were worked well along side the internet, isntead of create something like css module, for default nullstack support css and sass style.<\\/p><p class=\"my-8 text\">For create and manager your aplication, you don´t need handle with complex stuff like vite , webpack or babel, Nullstack have a npx tool to create application , with is have some things on a opitional support like tailwind, typescript and sass support, is a convension over configuration like <\\/p><h1 class=\"text-4xl font-bold text-rosePine-iris\">First of all: Folder design<\\/h1><p class=\"my-8 text\">The first thing i start love in nullstack is about freedom, unlike next.js or angular you don´t have a definitive folder structure. According the documentation, the only thing you need is:<\\/p><ul class=\"list-disc py-4 pl-4 marker:text-rosePine-iris\"><li class=\"my-2\">A client.js file witch is used for loading global client stuff, like added a global event or consume an browser api like Localstorage<\\/li><li class=\"my-2\">A server.js file witch is used for loading server side things like enviroment virables, connect an api or even write an http endpoint (because the second great thing about nullstack, in terms of runtime is a simple express server running in Node.js with is have all libs you are loved)<\\/li><li class=\"my-2\">A Application.js/jsx/njs file because is like React, a App.js file for initialize your application<\\/li><\\/ul><p class=\"my-8 text\">this structure is result of building project using the only nad recomended way, nullstack-create-app cli, you can lean more about this <a  href=\"https://nullstack.app/getting-started\" class=\"text-rosePine-rose underline underline-offset-2\">in nullstack documentation<\\/a><\\/p><p class=\"my-8 text\">for this project i use the command above<\\/p><pre><code class=\"hljs language-bash\">npx create-nullstack-app@latest project-name -tw\n<\\/code><\\/pre><p class=\"my-8 text\">Yep, i don´t use typescript in this project because seens like overrated for this....<\\/p><p class=\"my-8 text\">Now in project-name i can see a similar structure like this this structure<\\/p><pre><code class=\"hljs language-txt\">- src\n-- Application.jsx\n-- Application.css\n-- Counter.jsx\n-- Home.jsx\n- server.js\n- client.js\n- tailwind.config.js\n- tailwind.css\n- package.json\n<\\/code><\\/pre><p class=\"my-8 text\">next them i added some changes in my tailwind config file for support rose-pine thene and my fonts <\\/p><p class=\"my-8 text\">for this project the first thing i do is added support or rose-pine colors (you can see my <a  href=\"https://github.com/victorfernandesraton/victorfernandesraton.github.io/blob/e8da50419b66dd70bca2b838186df9ca03b4e4ea/tailwind.config.js\" class=\"text-rosePine-rose underline underline-offset-2\">tailwind.config.js<\\/a>)<\\/p><p class=\"my-8 text\">the second one is create the post structure, it&#39;s a simple and very stupid idea, i create a folder called posts, and added some markdowns file wittch i use the filename as a subpath in my blog section, so for create a simple post i added a post here<\\/p><p class=\"my-8 text\">the idea is using a node.js file systens functions to read this markdown and apply some styles using marked library (and some things is not work as well as you can see)<\\/p><p class=\"my-8 text\">the first implementation is your post component, because there we create to functions, one for get post and metadata for file and another to walk thorought the directory post and create a list of post, i mean content and metadata<\\/p><p class=\"my-8 text\">For access blog content you use /blog/some-post path, and they verify and get in /posts/some-post.md for contenrt<\\/p><h1 class=\"text-4xl font-bold text-rosePine-iris\">Almost perfect<\\/h1><p class=\"my-8 text\">I know this is not performatic way to do this because of two things<\\/p><ul class=\"list-disc py-4 pl-4 marker:text-rosePine-iris\"><li class=\"my-2\">The function for walking in directory is not optimized at all, also witch means we need iterate to every post and dcopllect every metadata and content like we do for show them, it&#39;s means , the scaklability of build time is incresead every time when i creating posts<\\/li><li class=\"my-2\">I need call all posts at once if i make this avaliable in SSG, because when i build one page, i need to call in prepare or initialize all posts and they not is performatic to show this list in to or many places<\\/li><\\/ul><p class=\"my-8 text\">For you know about this , you need read Nullstack documentation about static and server side function, for now, you should know we create two server side GET functions, it&#39;s cool because since we move to SSR mode, nullstack generate a GET endpoint api for make requests, of course the path is a dibrish string , but if you need it&#39;s a very welll endpoint you should read more about server initialization in doc<\\/p><p class=\"my-8 text\">for now i wrote a simple post component, like this<\\/p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-title class_\">Nullstack<\\/span> <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;nullstack&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">import<\\/span> fm <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;front-matter&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> { existsSync, readFileSync } <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:fs&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> fs <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:fs/promises&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> path <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:path&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">class<\\/span> <span class=\"hljs-title class_\">Post<\\/span> <span class=\"hljs-keyword\">extends<\\/span> <span class=\"hljs-title class_ inherited__\">Nullstack<\\/span> {\n\n  <span class=\"hljs-comment\">// itś a server side function witch will avaliable as endpoint later<\\/span>\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-title function_\">getPost<\\/span>(<span class=\"hljs-params\">{ key }<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> path = <span class=\"hljs-string\">`posts/<span class=\"hljs-subst\">${key}<\\/span>.md`<\\/span>\n    <span class=\"hljs-keyword\">if<\\/span> (!<span class=\"hljs-title function_\">existsSync<\\/span>(path)) {\n      <span class=\"hljs-keyword\">return<\\/span> <span class=\"hljs-literal\">null<\\/span>\n    }\n    <span class=\"hljs-keyword\">const<\\/span> data = <span class=\"hljs-title function_\">readFileSync<\\/span>(path, <span class=\"hljs-string\">&#x27;utf-8&#x27;<\\/span>)\n\n    <span class=\"hljs-keyword\">const<\\/span> { attributes, body } = <span class=\"hljs-title function_\">fm<\\/span>(data)\n\n    <span class=\"hljs-keyword\">return<\\/span> {\n      <span class=\"hljs-attr\">html<\\/span>: body,\n      <span class=\"hljs-attr\">name<\\/span>: key,\n      ...attributes,\n    }\n  }\n\n  <span class=\"hljs-comment\">// also another server side tunction, but in this case we need pass context paramas for using proxy<\\/span>\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-title function_\">getAllPost<\\/span>(<span class=\"hljs-params\">context<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> directoryPath = <span class=\"hljs-string\">&#x27;posts&#x27;<\\/span>\n    <span class=\"hljs-keyword\">const<\\/span> files = <span class=\"hljs-keyword\">await<\\/span> fs.<span class=\"hljs-title function_\">readdir<\\/span>(directoryPath)\n    <span class=\"hljs-keyword\">const<\\/span> filteredFiles = []\n    <span class=\"hljs-keyword\">for<\\/span> (<span class=\"hljs-keyword\">const<\\/span> file <span class=\"hljs-keyword\">of<\\/span> files) {\n      <span class=\"hljs-keyword\">const<\\/span> filePath = path.<span class=\"hljs-title function_\">join<\\/span>(directoryPath, file)\n      <span class=\"hljs-keyword\">const<\\/span> fileStats = <span class=\"hljs-keyword\">await<\\/span> fs.<span class=\"hljs-title function_\">stat<\\/span>(filePath)\n\n      <span class=\"hljs-keyword\">if<\\/span> (fileStats.<span class=\"hljs-title function_\">isFile<\\/span>() &amp;&amp; path.<span class=\"hljs-title function_\">extname<\\/span>(file) === <span class=\"hljs-string\">&#x27;.md&#x27;<\\/span>) {\n        <span class=\"hljs-keyword\">const<\\/span> data = <span class=\"hljs-keyword\">await<\\/span> <span class=\"hljs-title class_\">Post<\\/span>.<span class=\"hljs-title function_\">getPost<\\/span>({ ...context, <span class=\"hljs-attr\">key<\\/span>: file.<span class=\"hljs-title function_\">replace<\\/span>(<span class=\"hljs-string\">&#x27;.md&#x27;<\\/span>, <span class=\"hljs-string\">&#x27;&#x27;<\\/span>) })\n        filteredFiles.<span class=\"hljs-title function_\">push<\\/span>(data)\n      }\n    }\n    <span class=\"hljs-keyword\">return<\\/span> filteredFiles\n  }\n\n  <span class=\"hljs-comment\">// initiate in some times run in server side like when you access link directly, or loading in client side if you access link navigating in site, See more in https://developer.chrome.com/docs/web-platform/declarative-link-capturing/<\\/span>\n\n  <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-title function_\">initiate<\\/span>(<span class=\"hljs-params\">{ page, params, router }<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> article = <span class=\"hljs-keyword\">await<\\/span> <span class=\"hljs-title class_\">Post<\\/span>.<span class=\"hljs-title function_\">getPost<\\/span>({\n      <span class=\"hljs-attr\">key<\\/span>: params.<span class=\"hljs-property\">slug<\\/span> !== <span class=\"hljs-string\">&#x27;&#x27;<\\/span> ? params.<span class=\"hljs-property\">slug<\\/span> : router.<span class=\"hljs-property\">path<\\/span>.<span class=\"hljs-title function_\">slice<\\/span>(<span class=\"hljs-number\">1<\\/span>),\n    })\n\n    page.<span class=\"hljs-property\">title<\\/span> = article.<span class=\"hljs-property\">title<\\/span>\n    <span class=\"hljs-keyword\">if<\\/span> (article?.<span class=\"hljs-property\">description<\\/span>) {\n      page.<span class=\"hljs-property\">description<\\/span> = article.<span class=\"hljs-property\">description<\\/span>\n    }\n    <span class=\"hljs-keyword\">if<\\/span> (article?.<span class=\"hljs-property\">cover<\\/span>) {\n      page.<span class=\"hljs-property\">image<\\/span> = article.<span class=\"hljs-property\">cover<\\/span>.<span class=\"hljs-title function_\">replace<\\/span>(<span class=\"hljs-string\">&#x27;/public&#x27;<\\/span>, <span class=\"hljs-string\">&#x27;&#x27;<\\/span>)\n    }\n    <span class=\"hljs-title class_\">Object<\\/span>.<span class=\"hljs-title function_\">assign<\\/span>(<span class=\"hljs-variable language_\">this<\\/span>, article)\n  }\n\n  <span class=\"hljs-title function_\">render<\\/span>(<span class=\"hljs-params\">{ router }<\\/span>) {\n    <span class=\"hljs-keyword\">if<\\/span> (!<span class=\"hljs-variable language_\">this<\\/span>.<span class=\"hljs-property\">html<\\/span> &amp;&amp; <span class=\"hljs-variable language_\">this<\\/span>.<span class=\"hljs-property\">initiated<\\/span>) {\n      router.<span class=\"hljs-property\">path<\\/span> = <span class=\"hljs-string\">&#x27;/404&#x27;<\\/span>\n    }\n\n    <span class=\"hljs-keyword\">return<\\/span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;mx-auto mb-16 mt-8 max-w-[900px] flex flex-col gap-y-4 content-between break-words&quot;<\\/span>&gt;<\\/span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;text-4xl font-bold text-rosePine-love&quot;<\\/span>&gt;<\\/span>{this?.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1<\\/span>&gt;<\\/span>\n          {this.description &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;text-2xl font-bold text-rosePine-gold mb-4&quot;<\\/span>&gt;<\\/span>{this?.description}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2<\\/span>&gt;<\\/span>}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header<\\/span>&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article<\\/span> <span class=\"hljs-attr\">html<\\/span>=<span class=\"hljs-string\">{this.html}<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;mx-auto max-w-[900px]&quot;<\\/span> /&gt;<\\/span>\n      <span class=\"hljs-tag\">&lt;/&gt;<\\/span><\\/span>\n    )\n  }\n\n}\n\n<span class=\"hljs-keyword\">export<\\/span> <span class=\"hljs-keyword\">default<\\/span> <span class=\"hljs-title class_\">Post<\\/span>\n<\\/code><\\/pre><p class=\"my-8 text\">as you can se, we wrote less tham 100 lines and this is almost everything we need for blog<\\/p><p class=\"my-8 text\">the function <code>getPost<\\/code> is a server side function witch receiver key arg, this ar is a name for file , also is a path for this post in page blog , it&#39;s like a node.js function witch go to specific path and find if this file exists <\\/p><p class=\"my-8 text\">if were is we use a library called <a  href=\"https://github.com/jxson/front-matter\" class=\"text-rosePine-rose underline underline-offset-2\">front-matter<\\/a> for extract some markdown meatda<\\/p><p class=\"my-8 text\">the function <code>getAllPost<\\/code> is for search all posts and putting in a list, but is not called here, i mantaining here because is more simple to move them to another component, since this component is everythong about post<\\/p><p class=\"my-8 text\">in initiate method is were magic is work, they called getPost using a router slug to get path fot this post, \nfor now in this way, we not allowed to have subpath in posts directory.<\\/p><p class=\"my-8 text\">the method <code>Object.assign<\\/code> is useful here, since everything in nullstack is proxable , using this way we sure wen the function initiate is ending, they had article object  assign with post content and meatada<\\/p><p class=\"my-8 text\">and the last lines is like a react jsx, we know there, get some props and render them<\\/p><p class=\"my-8 text\">now, we need to setup a blog router and home page<\\/p><p class=\"my-8 text\">In render method is were the main component is render and you see a litle condition , if dont have any content, go to 404 page, as you can see, in nullstack router object is avaliable in every client side cycle injectable by framework, just change the path to redirect interal path, if you need a external redirect , you can use router.url instead<\\/p><h1 class=\"text-4xl font-bold text-rosePine-iris\">Router is never be eazy<\\/h1><p class=\"my-8 text\">Now, we need make some changes in  <code>src/Application.jsx<\\/code> file, because this is entry point for front end<\\/p><p class=\"my-8 text\">for now we just add a /blog path and some navbar element<\\/p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-title class_\">Nullstack<\\/span> <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;nullstack&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-string\">&#x27;../tailwind.css&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-title class_\">Home<\\/span> <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;./Home&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-title class_\">Post<\\/span> <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;./Post.jsx&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">class<\\/span> <span class=\"hljs-title class_\">Application<\\/span> <span class=\"hljs-keyword\">extends<\\/span> <span class=\"hljs-title class_ inherited__\">Nullstack<\\/span> {\n\n  postList = []\n  <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-title function_\">initiate<\\/span>(<span class=\"hljs-params\">{ limit }<\\/span>) {\n    <span class=\"hljs-variable language_\">this<\\/span>.<span class=\"hljs-property\">postList<\\/span> = <span class=\"hljs-keyword\">await<\\/span> <span class=\"hljs-title class_\">Post<\\/span>.<span class=\"hljs-title function_\">getAllPost<\\/span>()\n    <span class=\"hljs-keyword\">if<\\/span> (limit) {\n      <span class=\"hljs-variable language_\">this<\\/span>.<span class=\"hljs-property\">postList<\\/span> = <span class=\"hljs-variable language_\">this<\\/span>.<span class=\"hljs-property\">postList<\\/span>.<span class=\"hljs-title function_\">slice<\\/span>(<span class=\"hljs-number\">0<\\/span>, limit)\n    }\n  }\n\n  <span class=\"hljs-title function_\">renderHead<\\/span>(<span class=\"hljs-params\"><\\/span>) {\n    <span class=\"hljs-keyword\">return<\\/span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\\/span>&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link<\\/span> <span class=\"hljs-attr\">rel<\\/span>=<span class=\"hljs-string\">&quot;stylesheet&quot;<\\/span> <span class=\"hljs-attr\">href<\\/span>=<span class=\"hljs-string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css&quot;<\\/span> /&gt;<\\/span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head<\\/span>&gt;<\\/span><\\/span>\n    )\n  }\n\n  <span class=\"hljs-title function_\">renderFooter<\\/span>(<span class=\"hljs-params\"><\\/span>) {\n    <span class=\"hljs-keyword\">return<\\/span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;pt-6 flex flex-col max-w-[900px] mx-auto my-8 inset-x-0 bottom-0 lg:items-start items-center gap-4 text-center lg:text-start border-t-rosePine-surface border-t-[1px]&quot;<\\/span>&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p<\\/span>&gt;<\\/span>Developed with <span class=\"hljs-symbol\">&amp;#128156;<\\/span> by victorfernandesraton<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p<\\/span>&gt;<\\/span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer<\\/span>&gt;<\\/span><\\/span>\n    )\n  }\n\n  <span class=\"hljs-title function_\">renderBody<\\/span>(<span class=\"hljs-params\">{ children }<\\/span>) {\n    <span class=\"hljs-keyword\">return<\\/span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Head<\\/span> /&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul<\\/span>&gt;<\\/span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li<\\/span>&gt;<\\/span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a<\\/span> <span class=\"hljs-attr\">href<\\/span>=<span class=\"hljs-string\">&quot;/&quot;<\\/span>&gt;<\\/span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a<\\/span>&gt;<\\/span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li<\\/span>&gt;<\\/span>\n          {this.postList\n            .slice(0)\n            .sort((a, b) =&gt; b.published_at &gt;= a.published_at)\n            .map((i) =&gt; (\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li<\\/span>&gt;<\\/span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a<\\/span> <span class=\"hljs-attr\">href<\\/span>=<span class=\"hljs-string\">{<\\/span>`/<span class=\"hljs-attr\">blog<\\/span>/${<span class=\"hljs-attr\">i.name<\\/span>}`}&gt;<\\/span>{i.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a<\\/span>&gt;<\\/span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li<\\/span>&gt;<\\/span>\n            ))}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul<\\/span>&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;bg-rosePine-base text-rosePine-text lg:px-0 px-4 h-fulli&quot;<\\/span>&gt;<\\/span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body<\\/span>&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Footer<\\/span> /&gt;<\\/span>\n      <span class=\"hljs-tag\">&lt;/&gt;<\\/span><\\/span>\n    )\n  }\n\n  <span class=\"hljs-title function_\">render<\\/span>(<span class=\"hljs-params\">{ router }<\\/span>) {\n    <span class=\"hljs-keyword\">return<\\/span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Body<\\/span>&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Home<\\/span> <span class=\"hljs-attr\">route<\\/span>=<span class=\"hljs-string\">&quot;/&quot;<\\/span> /&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Post<\\/span> <span class=\"hljs-attr\">route<\\/span>=<span class=\"hljs-string\">&quot;/blog/:slug&quot;<\\/span> <span class=\"hljs-attr\">key<\\/span>=<span class=\"hljs-string\">{router.path}<\\/span> /&gt;<\\/span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Body<\\/span>&gt;<\\/span><\\/span>\n    )\n  }\n\n}\n\n<span class=\"hljs-keyword\">export<\\/span> <span class=\"hljs-keyword\">default<\\/span> <span class=\"hljs-title class_\">Application<\\/span>\n<\\/code><\\/pre><p class=\"my-8 text\">As you can see i also adding footer , body and navbar component, most for organization<\\/p><p class=\"my-8 text\">And i using initiate method again for get a list of existing posts, and render in List component, it&#39;s very simple<\\/p><p class=\"my-8 text\">As you can see in render of application, whe using route params, is very eazy to create routers and subrouters in nullstack, you see more <a  href=\"https://nullstack.app/routes-and-params\" class=\"text-rosePine-rose underline underline-offset-2\">here<\\/a>\nNow just need create some post, a markdown file with headers information like this<\\/p><pre><code class=\"hljs language-markdown\">---\ntitle: About me\ndescription: console.log(&#x27;hello world&#x27;)\npublished<span class=\"hljs-emphasis\">_at: 2023-05-15\ncover: /public/assets/img/profile.webp\n---\n\n\n# Hey guys!\n\nMy name is Victor Raton (some call me Baião), and I&#x27;m a Brazilian full-stack developer. When I&#x27;m not procrastinating or coming up with some side project that will be forgotten, I like to share my ideas here, covering topics such as web development, Linux, productivity, and even my hobbies, like playing metroidvanias or researching and customizing keyboards\n\nI started studying software development in 2018, the same year I entered my first Computer Science degree. The following year, I began working as a full-stack developer, mostly with JavaScript.\n\nI&#x27;ve decided to write more about technology in order to improve my skills.\n\n<\\/span>\n<\\/code><\\/pre><p class=\"my-8 text\">For least and less important, we need adding some markdowen support, fr this i suing <a  href=\"https://github.com/markedjs/marked\" class=\"text-rosePine-rose underline underline-offset-2\">marked<\\/a>, a markdown parser solution with works in server side.<\\/p><p class=\"my-8 text\">For separation concerm, i create this adapter in <code>/lib/markdown/MarkedAdapter.js<\\/code>, in this case i use class but you also can build using functions too \nMaybe you can see my entire solution using highlight.js for adding code highlight support here<\\/p><p class=\"my-8 text\">but for now we kept simple:<\\/p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import<\\/span> { marked } <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;marked&#x27;<\\/span>\n<span class=\"hljs-keyword\">export<\\/span> <span class=\"hljs-keyword\">class<\\/span> <span class=\"hljs-title class_\">MarkedAdapter<\\/span> {\n\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-title function_\">replaceImageUrl<\\/span>(<span class=\"hljs-params\">{ md }<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> regex = <span class=\"hljs-regexp\">/(!\\[[^\\]]*]\\([^)]*)\\/public(\\/[^)]+\\))/g<\\/span>\n\n    <span class=\"hljs-keyword\">return<\\/span> md.<span class=\"hljs-title function_\">replace<\\/span>(regex, <span class=\"hljs-string\">&#x27;$1$2&#x27;<\\/span>)\n  }\n\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-title function_\">_heading<\\/span>(<span class=\"hljs-params\">text, level<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> className = <span class=\"hljs-string\">`text-<span class=\"hljs-subst\">${<span class=\"hljs-number\">5<\\/span> - level}<\\/span>xl font-bold text-rosePine-iris`<\\/span>\n\n    <span class=\"hljs-keyword\">return<\\/span> <span class=\"hljs-string\">`&lt;h<span class=\"hljs-subst\">${level}<\\/span> class=&quot;<span class=\"hljs-subst\">${className}<\\/span>&quot;&gt;<span class=\"hljs-subst\">${text}<\\/span>&lt;/h<span class=\"hljs-subst\">${level}<\\/span>&gt;`<\\/span>\n  }\n\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-title function_\">_listitem<\\/span>(<span class=\"hljs-params\">body<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> className = <span class=\"hljs-string\">&#x27;my-2&#x27;<\\/span>\n\n    <span class=\"hljs-keyword\">return<\\/span> <span class=\"hljs-string\">`&lt;li class=&quot;<span class=\"hljs-subst\">${className}<\\/span>&quot;&gt;<span class=\"hljs-subst\">${body}<\\/span>&lt;/li&gt;`<\\/span>\n  }\n\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-title function_\">_list<\\/span>(<span class=\"hljs-params\">body<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> className = <span class=\"hljs-string\">&#x27;list-disc py-4 pl-4 marker:blue&#x27;<\\/span>\n\n    <span class=\"hljs-keyword\">return<\\/span> <span class=\"hljs-string\">`&lt;ul class=&quot;<span class=\"hljs-subst\">${className}<\\/span>&quot;&gt;<span class=\"hljs-subst\">${body}<\\/span>&lt;/ul&gt;`<\\/span>\n  }\n\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-title function_\">_link<\\/span>(<span class=\"hljs-params\">href, title, text<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> className = <span class=\"hljs-string\">&#x27;text-blue-400 underline underline-offset-2&#x27;<\\/span>\n\n    <span class=\"hljs-keyword\">return<\\/span> <span class=\"hljs-string\">`&lt;a <span class=\"hljs-subst\">${title ? <span class=\"hljs-string\">`title=&quot;<span class=\"hljs-subst\">${title}<\\/span>&quot;`<\\/span> : <span class=\"hljs-string\">&#x27;&#x27;<\\/span>}<\\/span> href=&quot;<span class=\"hljs-subst\">${href}<\\/span>&quot; class=&quot;<span class=\"hljs-subst\">${className}<\\/span>&quot;&gt;<span class=\"hljs-subst\">${text}<\\/span>&lt;/a&gt;`<\\/span>\n  }\n\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-title function_\">_paragraph<\\/span>(<span class=\"hljs-params\">text<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> className = <span class=\"hljs-string\">&#x27;my-8 text&#x27;<\\/span>\n    <span class=\"hljs-keyword\">return<\\/span> <span class=\"hljs-string\">`&lt;p class=&quot;<span class=\"hljs-subst\">${className}<\\/span>&quot;&gt;<span class=\"hljs-subst\">${text}<\\/span>&lt;/p&gt;`<\\/span>\n  }\n\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-title function_\">_start<\\/span>(<span class=\"hljs-params\"><\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> renderer = {\n      <span class=\"hljs-attr\">paragraph<\\/span>: <span class=\"hljs-title class_\">MarkedAdapter<\\/span>.<span class=\"hljs-property\">_paragraph<\\/span>,\n      <span class=\"hljs-attr\">heading<\\/span>: <span class=\"hljs-title class_\">MarkedAdapter<\\/span>.<span class=\"hljs-property\">_heading<\\/span>,\n      <span class=\"hljs-attr\">list<\\/span>: <span class=\"hljs-title class_\">MarkedAdapter<\\/span>.<span class=\"hljs-property\">_list<\\/span>,\n      <span class=\"hljs-attr\">listitem<\\/span>: <span class=\"hljs-title class_\">MarkedAdapter<\\/span>.<span class=\"hljs-property\">_listitem<\\/span>,\n      <span class=\"hljs-attr\">link<\\/span>: <span class=\"hljs-title class_\">MarkedAdapter<\\/span>.<span class=\"hljs-property\">_link<\\/span>,\n    }\n    marked.<span class=\"hljs-title function_\">use<\\/span>({\n      renderer,\n      <span class=\"hljs-attr\">mangle<\\/span>: <span class=\"hljs-literal\">false<\\/span>,\n      <span class=\"hljs-attr\">headerIds<\\/span>: <span class=\"hljs-literal\">false<\\/span>,\n    })\n\n    <span class=\"hljs-keyword\">return<\\/span> marked\n  }\n\n}\n<\\/code><\\/pre><p class=\"my-8 text\">Now using a server.js we added a singleton shared by context for server side funcions.<\\/p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-title class_\">Nullstack<\\/span> <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;nullstack&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">import<\\/span> { readdirSync } <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:fs&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> path <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:path&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">import<\\/span> { <span class=\"hljs-title class_\">MarkedAdapter<\\/span> } <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;./lib/marked/MarkedAdapter&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-title class_\">Application<\\/span> <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;./src/Application&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">const<\\/span> context = <span class=\"hljs-title class_\">Nullstack<\\/span>.<span class=\"hljs-title function_\">start<\\/span>(<span class=\"hljs-title class_\">Application<\\/span>)\n\n<span class=\"hljs-keyword\">const<\\/span> { worker } = context\n\n<span class=\"hljs-keyword\">const<\\/span> articles = <span class=\"hljs-title function_\">readdirSync<\\/span>(path.<span class=\"hljs-title function_\">join<\\/span>(__dirname, <span class=\"hljs-string\">&#x27;../posts&#x27;<\\/span>))\n\n<span class=\"hljs-comment\">// this is a little workarround to creating prelaod paths for serviceWorker support<\\/span>\nworker.<span class=\"hljs-property\">preload<\\/span> = [\n  <span class=\"hljs-string\">&#x27;/&#x27;<\\/span>,\n  ...articles.<span class=\"hljs-title function_\">map<\\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">article<\\/span>) =&gt;<\\/span> <span class=\"hljs-string\">`/blog/<span class=\"hljs-subst\">${article.replace(<span class=\"hljs-string\">&#x27;.md&#x27;<\\/span>, <span class=\"hljs-string\">&#x27;&#x27;<\\/span>)}<\\/span>`<\\/span>).<span class=\"hljs-title function_\">filter<\\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">article<\\/span>) =&gt;<\\/span> !article.<span class=\"hljs-title function_\">includes<\\/span>(<span class=\"hljs-string\">&#x27;.draft&#x27;<\\/span>)),\n]\ncontext.<span class=\"hljs-property\">start<\\/span> = <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-keyword\">function<\\/span> <span class=\"hljs-title function_\">start<\\/span>(<span class=\"hljs-params\"><\\/span>) {\n  context.<span class=\"hljs-property\">marked<\\/span> = <span class=\"hljs-title class_\">MarkedAdapter<\\/span>.<span class=\"hljs-title function_\">_start<\\/span>()\n}\n\n<span class=\"hljs-keyword\">export<\\/span> <span class=\"hljs-keyword\">default<\\/span> context\n<\\/code><\\/pre><p class=\"my-8 text\">next, we change some lines in post component for adding marked MarkedAdapter<\\/p><p class=\"my-8 text\">and we have something like this<\\/p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import<\\/span> <span class=\"hljs-title class_\">Nullstack<\\/span> <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;nullstack&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">import<\\/span> fm <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;front-matter&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> { existsSync, readFileSync } <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:fs&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> fs <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:fs/promises&#x27;<\\/span>\n<span class=\"hljs-keyword\">import<\\/span> path <span class=\"hljs-keyword\">from<\\/span> <span class=\"hljs-string\">&#x27;node:path&#x27;<\\/span>\n\n<span class=\"hljs-keyword\">class<\\/span> <span class=\"hljs-title class_\">Post<\\/span> <span class=\"hljs-keyword\">extends<\\/span> <span class=\"hljs-title class_ inherited__\">Nullstack<\\/span> {\n\n  <span class=\"hljs-comment\">// itś a server side function witch will avaliable as endpoint later<\\/span>\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-title function_\">getPost<\\/span>(<span class=\"hljs-params\">{ key, marked }<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> path = <span class=\"hljs-string\">`posts/<span class=\"hljs-subst\">${key}<\\/span>.md`<\\/span>\n    <span class=\"hljs-keyword\">if<\\/span> (!<span class=\"hljs-title function_\">existsSync<\\/span>(path)) {\n      <span class=\"hljs-keyword\">return<\\/span> <span class=\"hljs-literal\">null<\\/span>\n    }\n    <span class=\"hljs-keyword\">const<\\/span> data = <span class=\"hljs-title function_\">readFileSync<\\/span>(path, <span class=\"hljs-string\">&#x27;utf-8&#x27;<\\/span>)\n\n    <span class=\"hljs-keyword\">const<\\/span> { attributes, body } = <span class=\"hljs-title function_\">fm<\\/span>(data)\n    <span class=\"hljs-comment\">// here parse uising to generate new html<\\/span>\n    <span class=\"hljs-keyword\">const<\\/span> html = marked.<span class=\"hljs-title function_\">parse<\\/span>(body)\n\n    <span class=\"hljs-keyword\">return<\\/span> {\n      html,\n      <span class=\"hljs-attr\">name<\\/span>: key,\n      ...attributes,\n    }\n  }\n\n  <span class=\"hljs-comment\">// also another server side tunction, but in this case we need pass context paramas for using proxy<\\/span>\n  <span class=\"hljs-keyword\">static<\\/span> <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-title function_\">getAllPost<\\/span>(<span class=\"hljs-params\">context<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> directoryPath = <span class=\"hljs-string\">&#x27;posts&#x27;<\\/span>\n    <span class=\"hljs-keyword\">const<\\/span> files = <span class=\"hljs-keyword\">await<\\/span> fs.<span class=\"hljs-title function_\">readdir<\\/span>(directoryPath)\n    <span class=\"hljs-keyword\">const<\\/span> filteredFiles = []\n    <span class=\"hljs-keyword\">for<\\/span> (<span class=\"hljs-keyword\">const<\\/span> file <span class=\"hljs-keyword\">of<\\/span> files) {\n      <span class=\"hljs-keyword\">const<\\/span> filePath = path.<span class=\"hljs-title function_\">join<\\/span>(directoryPath, file)\n      <span class=\"hljs-keyword\">const<\\/span> fileStats = <span class=\"hljs-keyword\">await<\\/span> fs.<span class=\"hljs-title function_\">stat<\\/span>(filePath)\n\n      <span class=\"hljs-keyword\">if<\\/span> (fileStats.<span class=\"hljs-title function_\">isFile<\\/span>() &amp;&amp; path.<span class=\"hljs-title function_\">extname<\\/span>(file) === <span class=\"hljs-string\">&#x27;.md&#x27;<\\/span>) {\n        <span class=\"hljs-keyword\">const<\\/span> data = <span class=\"hljs-keyword\">await<\\/span> <span class=\"hljs-title class_\">Post<\\/span>.<span class=\"hljs-title function_\">getPost<\\/span>({ ...context, <span class=\"hljs-attr\">key<\\/span>: file.<span class=\"hljs-title function_\">replace<\\/span>(<span class=\"hljs-string\">&#x27;.md&#x27;<\\/span>, <span class=\"hljs-string\">&#x27;&#x27;<\\/span>) })\n        filteredFiles.<span class=\"hljs-title function_\">push<\\/span>(data)\n      }\n    }\n    <span class=\"hljs-keyword\">return<\\/span> filteredFiles\n  }\n\n  <span class=\"hljs-comment\">// initiate in some times run in server side like when you access link directly, or loading in client side if you access link navigating in site, See more in https://developer.chrome.com/docs/web-platform/declarative-link-capturing/<\\/span>\n\n  <span class=\"hljs-keyword\">async<\\/span> <span class=\"hljs-title function_\">initiate<\\/span>(<span class=\"hljs-params\">{ page, params, router }<\\/span>) {\n    <span class=\"hljs-keyword\">const<\\/span> article = <span class=\"hljs-keyword\">await<\\/span> <span class=\"hljs-title class_\">Post<\\/span>.<span class=\"hljs-title function_\">getPost<\\/span>({\n      <span class=\"hljs-attr\">key<\\/span>: params.<span class=\"hljs-property\">slug<\\/span> !== <span class=\"hljs-string\">&#x27;&#x27;<\\/span> ? params.<span class=\"hljs-property\">slug<\\/span> : router.<span class=\"hljs-property\">path<\\/span>.<span class=\"hljs-title function_\">slice<\\/span>(<span class=\"hljs-number\">1<\\/span>),\n    })\n\n    page.<span class=\"hljs-property\">title<\\/span> = article.<span class=\"hljs-property\">title<\\/span>\n    <span class=\"hljs-keyword\">if<\\/span> (article?.<span class=\"hljs-property\">description<\\/span>) {\n      page.<span class=\"hljs-property\">description<\\/span> = article.<span class=\"hljs-property\">description<\\/span>\n    }\n    <span class=\"hljs-keyword\">if<\\/span> (article?.<span class=\"hljs-property\">cover<\\/span>) {\n      page.<span class=\"hljs-property\">image<\\/span> = article.<span class=\"hljs-property\">cover<\\/span>.<span class=\"hljs-title function_\">replace<\\/span>(<span class=\"hljs-string\">&#x27;/public&#x27;<\\/span>, <span class=\"hljs-string\">&#x27;&#x27;<\\/span>)\n    }\n    <span class=\"hljs-title class_\">Object<\\/span>.<span class=\"hljs-title function_\">assign<\\/span>(<span class=\"hljs-variable language_\">this<\\/span>, article)\n  }\n\n  <span class=\"hljs-title function_\">render<\\/span>(<span class=\"hljs-params\">{ router }<\\/span>) {\n    <span class=\"hljs-keyword\">if<\\/span> (!<span class=\"hljs-variable language_\">this<\\/span>.<span class=\"hljs-property\">html<\\/span> &amp;&amp; <span class=\"hljs-variable language_\">this<\\/span>.<span class=\"hljs-property\">initiated<\\/span>) {\n      router.<span class=\"hljs-property\">path<\\/span> = <span class=\"hljs-string\">&#x27;/404&#x27;<\\/span>\n    }\n\n    <span class=\"hljs-keyword\">return<\\/span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;mx-auto mb-16 mt-8 max-w-[900px] flex flex-col gap-y-4 content-between break-words&quot;<\\/span>&gt;<\\/span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;text-4xl font-bold text-rosePine-love&quot;<\\/span>&gt;<\\/span>{this?.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1<\\/span>&gt;<\\/span>\n          {this.description &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;text-2xl font-bold text-rosePine-gold mb-4&quot;<\\/span>&gt;<\\/span>{this?.description}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2<\\/span>&gt;<\\/span>}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header<\\/span>&gt;<\\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article<\\/span> <span class=\"hljs-attr\">html<\\/span>=<span class=\"hljs-string\">{this.html}<\\/span> <span class=\"hljs-attr\">class<\\/span>=<span class=\"hljs-string\">&quot;mx-auto max-w-[900px]&quot;<\\/span> /&gt;<\\/span>\n      <span class=\"hljs-tag\">&lt;/&gt;<\\/span><\\/span>\n    )\n  }\n\n}\n\n<span class=\"hljs-keyword\">export<\\/span> <span class=\"hljs-keyword\">default<\\/span> <span class=\"hljs-title class_\">Post<\\/span>\n<\\/code><\\/pre><h1 class=\"text-4xl font-bold text-rosePine-iris\">TAH-DA<\\/h1><p class=\"my-8 text\">And where is \na list and post render as a markdown <\\/p><p class=\"my-8 text\"><img src=\"/assets/img/blog-works.gif\" alt=\"image\"><\\/p><p class=\"my-8 text\">Its a simple blog implementation using for initial modeling for this blog, of course, along side of time , i added some styles and features, you can follow this repo and look some changes a made here.<\\/p><p class=\"my-8 text\"><img src=\"/assets/img/thats-all.jpg\" alt=\"image\"><\\/p>","name":"creating-this-blog","title":"Creating this blog","description":"Nullstack - A journey of Simplicity and Flexibility","published_at":"2023-06-21T00:00:00.000Z","cover":"/public/assets/img/nulla-tools.webp","url":"undefined/blog/creating-this-blog"}},"page":{"image":"/assets/img/nulla-tools.webp","status":200,"title":"Creating this blog","description":"Nullstack - A journey of Simplicity and Flexibility","locale":"en-US"}}